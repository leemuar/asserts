#Использовать tempfiles

Перем юТест;
Перем Распаковщик;

Процедура Инициализация()
	
	ПутьКРаспаковщику = ОбъединитьПути(ТекущийСценарий().Каталог, "../src/unpack.os");
	ПодключитьСценарий(ПутьКРаспаковщику, "Распаковщик");
	
	Распаковщик = Новый Распаковщик;
	
КонецПроцедуры

Функция ПолучитьСписокТестов(Знач Контекст) Экспорт
	
	юТест = Контекст;
	
	ВсеТесты = Новый Массив;
	
	ВсеТесты.Добавить("Тест_ДолженВыполнитьПолнуюВыгрузкуЧерезПараметрыЗапуска");
	ВсеТесты.Добавить("Тест_ДолженВыгрузитьМодули");
	ВсеТесты.Добавить("Тест_ДолженРазложитьМодули1СПоПапкамСогласноИерархииМетаданных");
	ВсеТесты.Добавить("Тест_ДолженРазложитьМодули1СПоПапкамИзСуществующейБазы");
	ВсеТесты.Добавить("Тест_ДолженПолучитьФайлВерсийХранилища");
	ВсеТесты.Добавить("Тест_ДолженПрочитатьФайлВерсийИзХранилища1С");
	ВсеТесты.Добавить("Тест_ДолженПрочитатьФайлПользователейИзХранилища1С");
	ВсеТесты.Добавить("Тест_ДолженПодготовитьРепозитарийКСинхронизацииСХранилищем");
	ВсеТесты.Добавить("Тест_ДолженПрочитатьФайлВерсийСИменамиПользователейИзХранилища1С");
	ВсеТесты.Добавить("ТестДолжен_СинхронизироватьХранилищеКонфигурацийСГит");
	ВсеТесты.Добавить("ТестДолжен_ОпределитьЧтоТребуетсяСинхронизацияСГит");
	ВсеТесты.Добавить("ТестДолжен_ВыполнитьКоммитФайловВГит");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтениеФайлаАвторовГит");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьОтсутствиеФайлаAUTHORS");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьДанныеВФайлеAUTHORS");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьНеполнотуВФайлеAUTHORS");
	ВсеТесты.Добавить("ТестДолжен_ВыполнитьGitPush");
	ВсеТесты.Добавить("ТестДолжен_ВыполнитьGitPull");
	
	Возврат ВсеТесты;
	
КонецФункции

Процедура ПослеЗапускаТеста() Экспорт
	ВременныеФайлы.Удалить();
КонецПроцедуры

Функция ПолучитьФайлКонфигурацииИзМакета(Знач ИмяМакета = "") 
	
	Если ИмяМакета = "" Тогда
		ИмяМакета = "ТестовыйФайлКонфигурации";
	КонецЕсли;
	
	
	ФайлТестовойКонфигурации = Новый Файл(ОбъединитьПути(КаталогFixtures(), ИмяМакета + ".cf"));
	
	юТест.Проверить(ФайлТестовойКонфигурации.Существует(), "Файл тестовой конфигурации <"+ФайлТестовойКонфигурации.ПолноеИмя+"> должен существовать");
	
	Возврат ФайлТестовойКонфигурации.ПолноеИмя;
	
КонецФункции

Функция ПолучитьПутьКВременномуФайлуХранилища1С()
	
	ПутьКФайлуХранилища1С = ОбъединитьПути(КаталогFixtures(), "ТестовыйФайлХранилища1С.1CD");
	юТест.ПроверитьИстину(ПроверитьСуществованиеФайлаКаталога(ПутьКФайлуХранилища1С, "Тест_ДолженПолучитьФайлВерсийХранилища - ПутьКФайлуХранилища1С"));
	
	Возврат ПутьКФайлуХранилища1С;
	
КонецФункции

Функция КаталогFixtures()
	ОтносительныйПуть = ОбъединитьПути(ТекущийСценарий().Каталог, "fixtures");
КонецФункции

Процедура Тест_ДолженВыполнитьПолнуюВыгрузкуЧерезПараметрыЗапуска() Экспорт

	КаталогВыгрузки = ВременныеФайлы.СоздатьКаталог();
	МассивФайлов = НайтиФайлы(КаталогВыгрузки,"*.*");
	юТест.Проверить(МассивФайлов.Количество() = 0, "КаталогВыгрузки должен быть пуст");
	
	ПутьКФайлуКонфигурации = ПолучитьФайлКонфигурацииИзМакета();
	
	Распаковщик.РазобратьФайлКонфигурации(ПутьКФайлуКонфигурации, КаталогВыгрузки);
	
	МассивФайлов = НайтиФайлы(КаталогВыгрузки,"*.*");
	юТест.Проверить(МассивФайлов.Количество() > 0, "в каталоге разложения модулей 1С <"+КаталогВыгрузки+"> должны быть файлы");

КонецПроцедуры

Процедура Тест_ДолженВыгрузитьМодули() Экспорт 
	
	КаталогПлоскойВыгрузки = ВременныеФайлы.СоздатьКаталог();
	Распаковщик.ВыгрузитьМодулиКонфигурации(ПолучитьФайлКонфигурацииИзМакета(), КаталогПлоскойВыгрузки);
	
	МассивФайлов = НайтиФайлы(КаталогПлоскойВыгрузки,"*.*");
	
	юТест.ПроверитьИстину(МассивФайлов.Количество() > 0, "в каталоге выгрузки модулей 1С <"+КаталогПлоскойВыгрузки+"> должны быть файлы");
КонецПроцедуры

Функция ПолучитьТестовыеФайлыXMLИзХранилища1С(Знач ПутьКФайлуХранилища)

	Результат = Новый Структура;
	
	ПутьКХМЛФайлуВерсийХранилища1С = "";
	ПутьКХМЛФайлуПользователейХранилища1С = "";
	
	успешно = ВыгрузитьТаблицыВерсийИПользователейИзФайлаХранилища1С(ПутьКФайлуХранилища, ПутьКХМЛФайлуВерсийХранилища1С, ПутьКХМЛФайлуПользователейХранилища1С);
	юТест.Проверить(успешно, "ВыгрузитьТаблицыВерсийИПользователейИзФайлаХранилища1С");
			
	лФайл = Новый Файл(ПутьКХМЛФайлуВерсийХранилища1С);
	юТест.ПроверитьИстину(лФайл.Существует(), "Не удалось получить файл истории хранилища 1С - не существует файл <"+ПутьКХМЛФайлуВерсийХранилища1С + ">");
		
	лФайл = Новый Файл(ПутьКХМЛФайлуПользователейХранилища1С);
	юТест.ПроверитьИстину(лФайл.Существует(), "Не удалось получить файл пользователей хранилища 1С - не существует файл <"+ПутьКХМЛФайлуПользователейХранилища1С + ">");
		
	Результат.Вставить("ФайлВерсий", ПутьКХМЛФайлуВерсийХранилища1С);
	Результат.Вставить("ФайлПользователей", ПутьКХМЛФайлуПользователейХранилища1С);
	
	Возврат Результат;
	
КонецФункции

//////////////////////////////////////////////////////////////////////////////

Инициализация();
