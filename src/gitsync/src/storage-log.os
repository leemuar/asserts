////////////////////////////////////////////////////////////////////////////////
// 
// СКРИПТ РАБОТЫ С ИСТОРИЕЙ ХРАНИЛИЩА 1С
//
////////////////////////////////////////////////////////////////////////////////

Перем мФайлХранилища;

////////////////////////////////////////////////////////////////////////////////
// Программный интерфейс

Процедура ОткрытьФайл(Знач ИмяФайла) Экспорт
	мФайлХранилища = ИмяФайла;
КонецПроцедуры

Функция ПрочитатьТаблицуМеток() Экспорт
	
	ПрочитатьХранилище("LABELS");
	
	Возврат ПрочитатьФайлМеток(ФайлВыгрузкиТаблицы("LABELS"));
	
КонецФункции

Функция ПрочитатьТаблицуИстории() Экспорт
	
	ПрочитатьХранилище("VERSIONS");
	
	Возврат ПрочитатьФайлВерсий(ФайлВыгрузкиТаблицы("VERSIONS"));
	
КонецФункции

Функция ПрочитатьТаблицуИсторииСМетками() Экспорт
	
	ПрочитатьХранилище("VERSIONS;LABELS");
	
	История = ПрочитатьФайлВерсий(ФайлВыгрузкиТаблицы("VERSIONS"));
	Метки   = ПрочитатьФайлМеток(ФайлВыгрузкиТаблицы("LABELS"));
	
	История.Колонки.Добавить("Метка");
	
	Для Каждого СтрМетки Из Метки Цикл
		СтрокаВерсии = История.Найти(СтрМетки.НомерВерсии, "НомерВерсии");
		Если СтрокаВерсии <> Неопределено Тогда
			СтрокаВерсии.Метка = СтрМетки.ТекстМетки;
		КонецЕсли;
	КонецЦикла;
	
	Возврат История;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Функция ФайлВыгрузкиТаблицы(Знач Таблица)
	Возврат РабочийКаталог() + "\"+Таблица+".xml";
КонецФункции

Функция ПрочитатьФайлМеток(Знач ПутьКФайлуМеток)
	
	ТаблицаМеток = Новый ТаблицаЗначений;
	ТаблицаМеток.Колонки.Добавить("НомерВерсии");
	ТаблицаМеток.Колонки.Добавить("ТекстМетки");
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ПутьКФайлуМеток);
	
	Пока ЧтениеXML.Прочитать() Цикл 
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента 
			И ЧтениеXML.Имя = "Record" Тогда
			
			НоваяСтрока = ТаблицаМеток.Добавить();
			Пока ЧтениеXML.Прочитать() Цикл
				Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
					Если ЧтениеXML.Имя="VERNUM" Тогда
						НоваяСтрока.НомерВерсии = Число(ПолучитьТекст(ЧтениеXML));
					ИначеЕсли ЧтениеXML.Имя="NAME" Тогда
						НоваяСтрока.ТекстМетки = ПолучитьТекст(ЧтениеXML);
					Иначе
						ЧтениеXML.Пропустить();
					КонецЕсли;
				КонецЕсли;
				
				Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеXML.Имя = "Record" Тогда
					Прервать;	
				КонецЕсли;
			
			КонецЦикла;	
				
		КонецЕсли;
	
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	ТаблицаМеток.Сортировать("НомерВерсии");
	Возврат ТаблицаМеток;
	
КонецФункции

Функция ПрочитатьФайлВерсий(Знач ПутьКФайлуВерсий)
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ПутьКФайлуВерсий);
	
	История = Новый ТаблицаЗначений;
	История.Колонки.Добавить("НомерВерсии");
	История.Колонки.Добавить("ВерсияМетаданных");
	
	Пока ЧтениеXML.Прочитать() Цикл 
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента 
			И ЧтениеXML.Имя = "Record" Тогда
			
			НоваяСтрока = История.Добавить();
			Пока ЧтениеXML.Прочитать() Цикл
				Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
					Если ЧтениеXML.Имя="VERNUM" Тогда
						НоваяСтрока.НомерВерсии = Число(ПолучитьТекст(ЧтениеXML));
					ИначеЕсли ЧтениеXML.Имя="CODE" Тогда
						НоваяСтрока.ВерсияМетаданных = ПолучитьТекст(ЧтениеXML);
					Иначе
						ЧтениеXML.Пропустить();
					КонецЕсли;
				КонецЕсли;
				
				Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеXML.Имя = "Record" Тогда
					Прервать;	
				КонецЕсли;
			
			КонецЦикла;	
				
		КонецЕсли;
	
	КонецЦикла;

	ЧтениеXML.Закрыть();
	История.Сортировать("НомерВерсии");
	
	Возврат История;
	
КонецФункции

Функция ПолучитьТекст(ЧтениеXML)
	Результат = "";
	Пока ЧтениеXML.Прочитать()	Цикл
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
			Результат = ЧтениеXML.Значение;
		КонецЕсли;
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;  
	
	Возврат Результат;
	
КонецФункции

Процедура ПрочитатьХранилище(Знач ИменаТаблиц)

	ЛогTool1CD = ПолучитьИмяВременногоФайла("txt");
	
	СтрокаЗапуска = """" + ПутьTool1CD() + """ " 
			+ """" + мФайлХранилища + """"
			+ " -l """ + ЛогTool1CD + """"
			+ " -q -ne -ex " 
			+ РабочийКаталог() + " " + ИменаТаблиц;
			
	КодВозврата = "";
	Сообщить(СтрокаЗапуска);
	ЗапуститьПриложение(СтрокаЗапуска, "", Истина, КодВозврата);
	
	Если КодВозврата <> 0 Тогда
	
		ПоказатьЛог(ЛогTool1CD);
		ВызватьИсключение "Tool_1CD вернул код: " + КодВозврата;
		
	КонецЕсли;
	
	Поз = Найти(ИменаТаблиц,";");
	Если Поз > 0 Тогда
		ИмяТаблицы = Лев(ИменаТаблиц, Поз-1);
	Иначе
		ИмяТаблицы = ИменаТаблиц;
	КонецЕсли;
	
	Файл = Новый Файл(ФайлВыгрузкиТаблицы(ИмяТаблицы));
	Если Не Файл.Существует() Тогда
		ВызватьИсключение "Tool_1CD не создал файлы";
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоказатьЛог(Знач ЛогTool1CD)
	ТекстЛога = ПрочитатьФайл(ЛогTool1CD);
	Сообщить(ТекстЛога);

	Попытка
		УдалитьФайлы(ЛогTool1CD);
	Исключение
	КонецПопытки;
КонецПроцедуры

Функция КаталогВнешнихПрограмм()
	
	Если ЭтоЗапускТеста() Тогда
		Каталог = КаталогСкрипта();
		ОтносительныйПуть = "\..\..\..\externals";
	Иначе
		Каталог = ТекущийКаталог();
		ОтносительныйПуть = "\bin";
	КонецЕсли;
	
	Возврат Новый Файл(Каталог + ОтносительныйПуть).ПолноеИмя;
	
КонецФункции

Функция ПрочитатьФайл(Знач ИмяФайла)
	Чтение = Новый ЧтениеТекста(ИмяФайла);
	Текст = Чтение.Прочитать();
	Чтение.Закрыть();
	
	Возврат Текст;
КонецФункции

Функция КаталогСкрипта()
	Возврат Новый Файл(ТекущийСценарий().Источник).Путь;
КонецФункции

Функция ПутьTool1CD()
	Возврат КаталогВнешнихПрограмм() + "\Tool_1CD.exe";
КонецФункции

Функция ЭтоЗапускТеста()
	ИмяСтартового = Новый Файл(СтартовыйСценарий().Источник).Имя;
	Возврат ИмяСтартового = "testrunner.os";
КонецФункции

Функция РабочийКаталог()
	Возврат КаталогВременныхФайлов();
КонецФункции

Функция КаталогТестовыхДанных()

	КаталогТестовыхДанных = Новый Файл(КаталогСкрипта() + "\..\..\..\tests").ПолноеИмя;

	Возврат КаталогТестовыхДанных;
	
КонецФункции