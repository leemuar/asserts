////////////////////////////////////////////////////////////////////
// Стартовый модуль синхронизатора

#Использовать cmdline
#Использовать logos

Перем Лог;

///////////////////////////////////////////////////////////////////
// Прикладные процедуры и функции

Функция РазобратьАргументыКоманднойСтроки()

	Если АргументыКоманднойСтроки.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Парсер = Новый ПарсерАргументовКоманднойСтроки();
	
	ДобавитьКомандуPrepare(Парсер);
	ДобавитьАргументыПоУмолчанию(Парсер);
	
	Параметры = Парсер.Разобрать(АргументыКоманднойСтроки);

	Возврат Параметры;
	
КонецФункции

Процедура ДобавитьКомандуPrepare(Знач Парсер)
	
	Команда = Парсер.ОписаниеКоманды("-prepare");
	
	Парсер.ДобавитьПозиционныйПараметрКоманды(Команда, "ПутьКХранилищу");
	Парсер.ДобавитьПозиционныйПараметрКоманды(Команда, "URLРепозитория");
	Парсер.ДобавитьПозиционныйПараметрКоманды(Команда, "ЛокальныйКаталогГит");
	
	Парсер.ДобавитьИменованныйПараметрКоманды(Команда, "-mode");
	Парсер.ДобавитьИменованныйПараметрКоманды(Команда, "-email");
	Парсер.ДобавитьИменованныйПараметрКоманды(Команда, "-debug");
	
КонецПроцедуры

Процедура ДобавитьАргументыПоУмолчанию(Знач Парсер)
	
	Парсер.ДобавитьПараметр("ПутьКХранилищу");
	Парсер.ДобавитьПараметр("URLРепозитория");
	
	Парсер.ДобавитьПараметр("ЛокальныйКаталогГит");
	Парсер.ДобавитьИменованныйПараметр("-email");
	Парсер.ДобавитьИменованныйПараметр("-v8version");
	Парсер.ДобавитьИменованныйПараметр("-debug");
	
КонецПроцедуры

Процедура ВыполнитьОбработку(Знач Параметры)

	Если ТипЗнч(Параметры) = Тип("Структура") Тогда
		ВыполнитьКоманду(Параметры);
	Иначе
		
		Если Параметры["-debug"] = "on" Тогда
			Лог.УстановитьУровень(УровниЛога.Отладка);
		КонецЕсли;
		
		Синхронизировать(
			Параметры["ПутьКХранилищу"], 
			Параметры["URLРепозитория"],
			Параметры["ЛокальныйКаталогГит"], 
			Параметры["-email"],
			Параметры["-v8version"]);
			
	КонецЕсли;

КонецПроцедуры

Процедура ВыполнитьКоманду(Знач ОписаниеКоманды)

	Если ОписаниеКоманды.Команда = "-prepare" Тогда
		ПодготовитьРепозитарий(ОписаниеКоманды.ЗначенияПараметров);
	Иначе
		ВызватьИсключение "Неизвестная команда: " + ОписаниеКоманды.Команда;
	КонецЕсли;

КонецПроцедуры

Процедура ПодготовитьРепозитарий(Знач Параметры)
	
	Если Параметры["-mode"] = "init" Тогда
		// инициализировать с нуля
		Распаковщик = ПолучитьРаспаковщик();
		
	Иначе
		// клонировать
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Синхронизировать(Знач ПутьКХранилищу, 
			Знач URLРепозитория,
			Знач ЛокальныйКаталогГит = Неопределено,
			Знач ДоменПочты = Неопределено,
			Знач ВерсияПлатформы = Неопределено,
			Знач НачальнаяВерсия = 0,
			Знач КонечнаяВерсия = 0)
	
	Лог.Информация("Начинаю синхронизацию хранилища 1С и репозитария GIT");
	
	Если ЛокальныйКаталогГит = Неопределено Тогда
		ЛокальныйКаталогГит = ТекущийКаталог();
	КонецЕсли;
	
	Лог.Отладка("ПутьКХранилищу = " + ПутьКХранилищу);
	Лог.Отладка("URLРепозитория = " + URLРепозитория);
	Лог.Отладка("ЛокальныйКаталогГит = " + ЛокальныйКаталогГит);
	Лог.Отладка("ДоменПочты = " + ДоменПочты);
	Лог.Отладка("ВерсияПлатформы = " + ВерсияПлатформы);
	
	ФайлПутиКХранилищу = Новый Файл(ПутьКХранилищу);
	Если ФайлПутиКХранилищу.Существует() и ФайлПутиКХранилищу.ЭтоКаталог() Тогда
		ФайлБазыДанныхХранилища = ФайлПутиКХранилищу.ПолноеИмя + "\1cv8ddb.1CD";
	Иначе
		ФайлБазыДанныхХранилища = ФайлПутиКХранилищу.ПолноеИмя;
	КонецЕсли;
	
	Распаковщик = ПолучитьРаспаковщик();
	Распаковщик.ВерсияПлатформы = ВерсияПлатформы;
	Распаковщик.ДоменПочтыДляGitПоУмолчанию = ДоменПочты;
	
	Лог.Информация("Получение изменений с удаленного узла (pull)");
	КодВозврата = Распаковщик.ВыполнитьGitPull(ЛокальныйКаталогГит, URLРепозитория, "master");
	Если КодВозврата <> 0 Тогда
		ВызватьИсключение "Не удалось получить изменения с удаленного узла (код: " + КодВозврата + ")";
	КонецЕсли;
	
	Лог.Информация("Синхронизация изменений с хранилищем");
	Распаковщик.СинхронизироватьХранилищеКонфигурацийСГит(ЛокальныйКаталогГит, ФайлБазыДанныхХранилища, НачальнаяВерсия, КонечнаяВерсия);
	
	Лог.Информация("Отправка изменений на удаленный узел");
	КодВозврата = Распаковщик.ВыполнитьGitPush(ЛокальныйКаталогГит, URLРепозитория, "master")
	Если КодВозврата <> 0 Тогда
		ВызватьИсключение "Не удалось отправить изменения на удаленный узел (код: " + КодВозврата + ")";
	КонецЕсли;
	
	Лог.Информация("Синхронизация завершена");
	
КонецПроцедуры

Функция ПолучитьРаспаковщик()
	КаталогСкрипта = ТекущийСценарий().Каталог;
	Возврат ЗагрузитьСценарий(ОбъединитьПути(КаталогСкрипта, "unpack.os"));
КонецФункции

///////////////////////////////////////////////////////////////////
// Точка входа в приложение

Лог = Логирование.ПолучитьЛог("oscript.app.gitsync");

Попытка
	Параметры = РазобратьАргументыКоманднойСтроки();
	Если Параметры <> Неопределено Тогда
		ВыполнитьОбработку(Параметры);
	Иначе
		ВызватьИсключение("Указаны некорректные аргументы командной строки");
	КонецЕсли;
Исключение
	Лог.Ошибка(ОписаниеОшибки());
	ЗавершитьРаботу(1);
КонецПопытки;
