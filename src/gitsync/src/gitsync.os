////////////////////////////////////////////////////////////////////
// Стартовый модуль синхронизатора

#Использовать tempfiles
#Использовать cmdline
#Использовать logos

Перем Лог;

///////////////////////////////////////////////////////////////////
// Прикладные процедуры и функции

Функция РазобратьАргументыКоманднойСтроки()

	Если АргументыКоманднойСтроки.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Парсер = Новый ПарсерАргументовКоманднойСтроки();
	
	ДобавитьКомандуClone(Парсер);
	ДобавитьКомандуInit(Парсер);
	ДобавитьАргументыПоУмолчанию(Парсер);
	
	Параметры = Парсер.Разобрать(АргументыКоманднойСтроки);

	Возврат Параметры;
	
КонецФункции

Процедура ДобавитьКомандуClone(Знач Парсер)
	
	Команда = Парсер.ОписаниеКоманды("clone");
	
	Парсер.ДобавитьПозиционныйПараметрКоманды(Команда, "ПутьКХранилищу");
	Парсер.ДобавитьПозиционныйПараметрКоманды(Команда, "URLРепозитория");
	Парсер.ДобавитьПозиционныйПараметрКоманды(Команда, "ЛокальныйКаталогГит");
	
	Парсер.ДобавитьИменованныйПараметрКоманды(Команда, "-email");
	Парсер.ДобавитьИменованныйПараметрКоманды(Команда, "-debug");
	Парсер.ДобавитьКоманду(Команда);
	
КонецПроцедуры

Процедура ДобавитьКомандуInit(Знач Парсер)
	
	Команда = Парсер.ОписаниеКоманды("init");
	
	Парсер.ДобавитьПозиционныйПараметрКоманды(Команда, "ПутьКХранилищу");
	Парсер.ДобавитьПозиционныйПараметрКоманды(Команда, "ЛокальныйКаталогГит");
	
	Парсер.ДобавитьИменованныйПараметрКоманды(Команда, "-email");
	Парсер.ДобавитьИменованныйПараметрКоманды(Команда, "-debug");
	Парсер.ДобавитьКоманду(Команда);
	
КонецПроцедуры

Процедура ДобавитьАргументыПоУмолчанию(Знач Парсер)
	
	Парсер.ДобавитьПараметр("ПутьКХранилищу");
	Парсер.ДобавитьПараметр("URLРепозитория");
	
	Парсер.ДобавитьПараметр("ЛокальныйКаталогГит");
	Парсер.ДобавитьИменованныйПараметр("-email");
	Парсер.ДобавитьИменованныйПараметр("-v8version");
	Парсер.ДобавитьИменованныйПараметр("-debug");
	
КонецПроцедуры

Процедура ВыполнитьОбработку(Знач Параметры)

	Если ТипЗнч(Параметры) = Тип("Структура") Тогда
		УстановитьРежимОтладкиПриНеобходимости(Параметры.ЗначенияПараметров);
		ВыполнитьКоманду(Параметры);
	Иначе
	
		УстановитьРежимОтладкиПриНеобходимости(Параметры);
	
		Синхронизировать(
			Параметры["ПутьКХранилищу"], 
			Параметры["URLРепозитория"],
			Параметры["ЛокальныйКаталогГит"], 
			Параметры["-email"],
			Параметры["-v8version"]);
			
	КонецЕсли;

КонецПроцедуры

Процедура ВыполнитьКоманду(Знач ОписаниеКоманды)

	Если ОписаниеКоманды.ЗначенияПараметров["-debug"] = "on" Тогда
		Лог.УстановитьУровень(УровниЛога.Отладка);
	КонецЕсли;

	Если ОписаниеКоманды.Команда = "init" Тогда
		ПодготовитьНовыйРепозитарий(ОписаниеКоманды.ЗначенияПараметров, Истина);
	Иначе
		ВызватьИсключение "Неизвестная команда: " + ОписаниеКоманды.Команда;
	КонецЕсли;

КонецПроцедуры

Процедура ПодготовитьНовыйРепозитарий(Знач Параметры, Знач РежимИнициализации)
	
	Распаковщик = ПолучитьРаспаковщик();
	Распаковщик.ДоменПочтыДляGitПоУмолчанию = Параметры["-email"];
	УстановитьРежимОтладкиПриНеобходимости(Параметры);
	
	КаталогРабочейКопии = Параметры["ЛокальныйКаталогГит"];
	Если КаталогРабочейКопии = Неопределено Тогда
		КаталогРабочейКопии = ТекущийКаталог();
	Иначе
		ФайлРК = Новый Файл(КаталогРабочейКопии);
		КаталогРабочейКопии = ФайлРК.ПолноеИмя;
	КонецЕсли;
	
	Если РежимИнициализации Тогда
		// инициализировать с нуля
		СоздатьКаталог(КаталогРабочейКопии);
		Результат = Распаковщик.ИнициализироватьРепозитарий(КаталогРабочейКопии);
		Если Результат <> 0 Тогда
			ВызватьИсключение "git init вернул код <"+Результат+">";
		КонецЕсли;
	Иначе
		// клонировать
		URL = Параметры["URLРепозитория"];
		СоздатьКаталог(КаталогРабочейКопии);
		Результат = Распаковщик.КлонироватьРепозитарий(КаталогРабочейКопии, URL);
		Если Результат <> 0 Тогда
			ВызватьИсключение "git clone вернул код <"+Результат+">";
		КонецЕсли;
	КонецЕсли;
	
	КаталогИсходников = Новый Файл(ОбъединитьПути(Параметры["ЛокальныйКаталогГит"], "src"));
	Если Не КаталогИсходников.Существует() Тогда
		СоздатьКаталог(КаталогИсходников.ПолноеИмя);
	ИначеЕсли Не КаталогИсходников.ЭтоКаталог() Тогда
		ВызватьИсключение "Невозможно создать каталог " + КаталогИсходников.ПолноеИмя;
	КонецЕсли;
	
	СгенерироватьФайлAUTHORS(ПолучитьПутьКБазеДанныхХранилища(Параметры["ПутьКХранилищу"]), КаталогИсходников.ПолноеИмя, Распаковщик);
	СгенерироватьФайлVERSION(КаталогИсходников.ПолноеИмя, Распаковщик);
	
КонецПроцедуры

Процедура Синхронизировать(Знач ПутьКХранилищу, 
			Знач URLРепозитория,
			Знач ЛокальныйКаталогГит = Неопределено,
			Знач ДоменПочты = Неопределено,
			Знач ВерсияПлатформы = Неопределено,
			Знач НачальнаяВерсия = 0,
			Знач КонечнаяВерсия = 0)
	
	Лог.Информация("Начинаю синхронизацию хранилища 1С и репозитария GIT");
	
	Если ЛокальныйКаталогГит = Неопределено Тогда
		ЛокальныйКаталогГит = ТекущийКаталог();
	КонецЕсли;
	
	Лог.Отладка("ПутьКХранилищу = " + ПутьКХранилищу);
	Лог.Отладка("URLРепозитория = " + URLРепозитория);
	Лог.Отладка("ЛокальныйКаталогГит = " + ЛокальныйКаталогГит);
	Лог.Отладка("ДоменПочты = " + ДоменПочты);
	Лог.Отладка("ВерсияПлатформы = " + ВерсияПлатформы);
	
	ФайлБазыДанныхХранилища = ПолучитьПутьКБазеДанныхХранилища(ПутьКХранилищу);
	
	Распаковщик = ПолучитьРаспаковщик();
	Распаковщик.ВерсияПлатформы = ВерсияПлатформы;
	Распаковщик.ДоменПочтыДляGitПоУмолчанию = ДоменПочты;
	
	Лог.Информация("Получение изменений с удаленного узла (pull)");
	КодВозврата = Распаковщик.ВыполнитьGitPull(ЛокальныйКаталогГит, URLРепозитория, "master");
	Если КодВозврата <> 0 Тогда
		ВызватьИсключение "Не удалось получить изменения с удаленного узла (код: " + КодВозврата + ")";
	КонецЕсли;
	
	Лог.Информация("Синхронизация изменений с хранилищем");
	Распаковщик.СинхронизироватьХранилищеКонфигурацийСГит(ЛокальныйКаталогГит, ФайлБазыДанныхХранилища, НачальнаяВерсия, КонечнаяВерсия);
	
	Лог.Информация("Отправка изменений на удаленный узел");
	КодВозврата = Распаковщик.ВыполнитьGitPush(ЛокальныйКаталогГит, URLРепозитория, "master");
	Если КодВозврата <> 0 Тогда
		ВызватьИсключение "Не удалось отправить изменения на удаленный узел (код: " + КодВозврата + ")";
	КонецЕсли;
	
	Лог.Информация("Синхронизация завершена");
	
КонецПроцедуры

Процедура УстановитьРежимОтладкиПриНеобходимости(Знач Параметры)
	Если Параметры["-debug"] = "on" Тогда
		Лог.УстановитьУровень(УровниЛога.Отладка);
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьРаспаковщик()
	КаталогСкрипта = ТекущийСценарий().Каталог;
	Возврат ЗагрузитьСценарий(ОбъединитьПути(КаталогСкрипта, "unpack.os"));
КонецФункции

Функция ПолучитьПутьКБазеДанныхХранилища(Знач ПутьКХранилищу)
	ФайлПутиКХранилищу = Новый Файл(ПутьКХранилищу);
	Если ФайлПутиКХранилищу.Существует() и ФайлПутиКХранилищу.ЭтоКаталог() Тогда
		ФайлБазыДанныхХранилища = ФайлПутиКХранилищу.ПолноеИмя + "\1cv8ddb.1CD";
	ИначеЕсли ФайлПутиКХранилищу.Существует() Тогда
		ФайлБазыДанныхХранилища = ФайлПутиКХранилищу.ПолноеИмя;
	Иначе
		ВызватьИсключение "Некорректный путь к хранилищу: " + ФайлПутиКХранилищу.ПолноеИмя;
	КонецЕсли;
	
	Возврат ФайлБазыДанныхХранилища;
КонецФункции

Процедура СгенерироватьФайлAUTHORS(Знач ФайлХранилища, Знач КаталогИсходников, Знач Распаковщик)
	
	ОбъектФайлХранилища = Новый Файл(ПолучитьПутьКБазеДанныхХранилища(ФайлХранилища));
	Если Не ОбъектФайлХранилища.Существует() Тогда
		ВызватьИсключение "Файл хранилища <" + ОбъектФайлХранилища.ПолноеИмя + "> не существует.";
	КонецЕсли;
	
	ФайлАвторов = Новый Файл(ОбъединитьПути(КаталогИсходников, "AUTHORS"));
	Если ФайлАвторов.Существует() Тогда
		Лог.Информация("Файл " + ФайлАвторов.ПолноеИмя + " уже существует. Пропускаем генерацию файла AUTHORS");
		Возврат;
	КонецЕсли;
	
	Попытка
		
		Лог.Информация("Формирую файл в каталоге " + КаталогИсходников);
		Распаковщик.СформироватьПервичныйФайлПользователейДляGit(ОбъектФайлХранилища.ПолноеИмя, ФайлАвторов.ПолноеИмя);
		Лог.Информация("Файл сгенерирован");
		
	Исключение
		Лог.Ошибка("Не удалось сформировать файл авторов");
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура СгенерироватьФайлVERSION(Знач КаталогИсходников, Знач Распаковщик)
	
	ФайлВерсий = Новый Файл(ОбъединитьПути(КаталогИсходников, "VERSION"));
	Если ФайлВерсий.Существует() Тогда
		Лог.Информация("Файл " + ФайлВерсий.ПолноеИмя + " уже существует. Пропускаем генерацию файла VERSION");
		Возврат;
	КонецЕсли;
	
	Распаковщик.ЗаписатьФайлВерсийГит(ФайлВерсий.Путь);
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////
// Точка входа в приложение

Лог = Логирование.ПолучитьЛог("oscript.app.gitsync");

Попытка
	Параметры = РазобратьАргументыКоманднойСтроки();
	Если Параметры <> Неопределено Тогда
		ВыполнитьОбработку(Параметры);
	Иначе
		ВызватьИсключение("Указаны некорректные аргументы командной строки");
	КонецЕсли;
	ВременныеФайлы.Удалить();
Исключение
	Лог.Ошибка(ОписаниеОшибки());
	ВременныеФайлы.Удалить();
	ЗавершитьРаботу(1);
КонецПопытки;
