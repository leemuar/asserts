///////////////////////////////////////////////////////////////////////
//
// Тест для парсера JSON
//
///////////////////////////////////////////////////////////////////////
#Использовать ".."

Перем юТест;
Перем _преобразовательJSON;

////////////////////////////////////////////////////////////////////
// Программный интерфейс

Функция Инициализация() 

	_преобразовательJSON = Новый ПарсерJSON();

КонецФункции


Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	юТест = ЮнитТестирование;
	
	ВсеТесты = Новый Массив;
	
	ВсеТесты.Добавить("ТестДолжен_ПроверитьПростойJSON");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьФайлMockНаЧтение");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьФайлMockНаЗапись");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоОбъектПриводитсяКСтруктуре");
	
	Возврат ВсеТесты;
КонецФункции

Процедура ТестДолжен_ПроверитьПростойJSON() Экспорт
	
	тестовыйJSON = "{
	|    ""firstName"": ""Иван"",
	|    ""lastName"": ""Иванов"",
	|    ""address"": {
	|        ""streetAddress"": ""Московское ш., 101, кв.101"",
	|        ""city"": ""Ленинград"",
	|        ""postalCode"": 101101
	|    },
	|    ""phoneNumbers"": [
	|        ""812 123-1234"",
	|        ""916 123-4567""
	|    ]
	|}";

	типаОбъект = _преобразовательJSON.ПрочитатьJSON(тестовыйJSON);

	ОбъектСтрокой = _преобразовательJSON.ЗаписатьJSON(типаОбъект);

	юТест.ПроверитьРавенство(ПривестиОкончанияСтрок(ОбъектСтрокой), ПривестиОкончанияСтрок(тестовыйJSON));
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьФайлMockНаЧтение() Экспорт
	
	КаталогСкрипта = Новый Файл(ТекущийСценарий().Источник).Путь;
	ЧтениеТекста = Новый ЧтениеТекста(КаталогСкрипта + "/json-mock.json");
	
	СтрокаJSON = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();
	
	Объект = _преобразовательJSON.ПрочитатьJSON(СтрокаJSON);
	
	Сообщить("Тип полученного объекта: " + ТипЗнч(Объект));
	
	юТест.ПроверитьРавенство(Тип("Соответствие"), ТипЗнч(Объект));
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьФайлMockНаЗапись() Экспорт
	КаталогСкрипта = Новый Файл(ТекущийСценарий().Источник).Путь;
	ЧтениеТекста = Новый ЧтениеТекста(КаталогСкрипта + "/json-mock.json");
	
	СтрокаJSON = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();
	
	Объект = _преобразовательJSON.ПрочитатьJSON(СтрокаJSON);
	
	СтрокаJSON2 = _преобразовательJSON.ЗаписатьJSON(Объект);
	// assert примитивный, желающие могут сделать проверку получше.
	юТест.ПроверитьЛожь(ПустаяСтрока(СтрокаJSON2));
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтоОбъектПриводитсяКСтруктуре() Экспорт

	тестовыйJSON = "{
	|    ""firstName"": ""Иван"",
	|    ""lastName"": ""Иванов"",
	|    ""address"": {
	|        ""streetAddress"": ""Московское ш., 101, кв.101"",
	|        ""city"": ""Ленинград"",
	|        ""postalCode"": 101101
	|    },
	|    ""phoneNumbers"": [
	|        ""812 123-1234"",
	|        ""916 123-4567""
	|    ]
	|}";

	Объект = _преобразовательJSON.ПрочитатьJSON(тестовыйJSON,,,Истина);
	юТест.ПроверитьРавенство(Тип("Структура"), ТипЗнч(Объект));

КонецПроцедуры

Функция ПривестиОкончанияСтрок(Знач ИсходныйТекст)
	Возврат СтрЗаменить(ИсходныйТекст, Символы.ВК + Символы.ПС, Символы.ПС);
КонецФункции

///////////////////////////////////////////////////////////////////
// Точка входа

Инициализация();